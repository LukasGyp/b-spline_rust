extern crate ndarray as nd;
use nd::{Axis, array, Array, Array1, Array2, Dim, ShapeError, concatenate};

fn get_knot(n_sample: i32, degree: i32) -> Result<Array<f64, Dim<[usize; 1]>>, ShapeError> {
  let a: Array1<f64> = Array::zeros(degree as usize);
  let b: Array1<f64> = Array::linspace(0., 1., (n_sample - 2*degree) as usize);
  let c: Array1<f64> = Array::ones(degree as usize);
  
  concatenate(Axis(0), &[a.view(), b.view(), c.view()])
}

fn basis(knot: &Array1<f64>, j: usize, k: usize, t: f64) -> f64 {
  if k == 0 {
    return ((knot[j] <= t) && (t < knot[j+1])) as i32 as f64;
  } else {
    let mut b = 0.;
    let b1 = basis(&knot, j, k-1, t);
    let b2 = basis(&knot, j+1, k-1, t);
    if b1 != 0. {
      b += (t - knot[j]) / (knot[j+k] - knot[j]) * b1;
    }
    if b2 != 0. {
      b += (knot[j+k+1] - t) / (knot[j+k+1] - knot[j+1]) * b2;
    }
    return b;
  }
}

fn sum(x: &Array2<f64>, t: f64, p: usize) -> Array1<f64> {
  let knot: Array1<f64> = get_knot((p+4).try_into().unwrap(), 3).unwrap();
  let mut s: Array1<f64> = array![0., 0.];
  
  for i in 0..p {
    let b = basis(&knot, i, 3, t);
    s[0] += x[[i, 0]] * b;
    s[1] += x[[i, 1]] * b;
  }

  s
}


fn main() {
  let x: Array2<f64> = array![[ 238.8867 , 1361.8524 ],
  [ 239.41405, 1361.287  ],
  [ 240.59265, 1359.6655 ],
  [ 249.3663 , 1351.8116 ],
  [ 274.20938, 1332.9199 ],
  [ 315.93686, 1299.8191 ],
  [ 363.90143, 1261.3867 ],
  [ 413.96747, 1222.3948 ],
  [ 471.93307, 1179.4391 ],
  [ 530.22034, 1137.5803 ],
  [ 585.863  , 1096.858  ],
  [ 635.9896 , 1057.278  ],
  [ 679.804  , 1022.7416 ],
  [ 715.9613 ,  997.2689 ],
  [ 738.8683 ,  979.4862 ],
  [ 748.6125 ,  971.29456],
  [ 752.3876 ,  967.1824 ],
  [ 753.3104 ,  964.63794],
  [ 752.9149 ,  963.7898 ],
  [ 751.59656,  963.22437],
  [ 748.56433,  963.5071 ],
  [ 742.2362 ,  962.3762 ],
  [ 730.70197,  961.4957 ],
  [ 708.4848 ,  958.3004 ],
  [ 668.6032 ,  953.06934],
  [ 617.52997,  944.60474],
  [ 563.2241 ,  936.69446],
  [ 507.05417,  930.4635 ],
  [ 445.39716,  928.1847 ],
  [ 380.79752,  930.40686],
  [ 324.32428,  934.9247 ],
  [ 281.00827,  942.2639 ],
  [ 245.92148,  951.86487],
  [ 222.76176,  960.8552 ],
  [ 209.92267,  968.2223 ],
  [ 205.92772,  971.4231 ],
  [ 206.19139,  973.9675 ],
  [ 209.61913,  977.0774 ],
  [ 216.73827,  981.0354 ],
  [ 232.81306,  988.29724],
  [ 260.0006 , 1008.0416 ],
  [ 294.35532, 1034.3441 ],
  [ 327.57007, 1064.8322 ],
  [ 365.79193, 1100.4485 ],
  [ 406.89047, 1141.1199 ],
  [ 445.1572 , 1181.2767 ],
  [ 487.85886, 1222.5643 ],
  [ 525.83545, 1260.4481 ],
  [ 558.56506, 1287.6624 ],
  [ 584.69226, 1304.6648 ],
  [ 605.6379 , 1317.855  ],
  [ 621.21466, 1321.8491 ],
  [ 631.5787 , 1325.0227 ],
  [ 635.1854 , 1324.534  ],
  [ 636.2401 , 1321.9896 ],
  [ 635.71277, 1314.6389 ],
  [ 635.4491 , 1292.4133 ],
  [ 630.20996, 1241.1105 ],
  [ 616.0218 , 1181.7743 ],
  [ 595.4712 , 1125.7798 ],
  [ 577.2673 , 1069.7965 ],
  [ 559.33234, 1013.8303 ],
  [ 543.7783 ,  962.348  ],
  [ 531.10364,  916.5143 ],
  [ 519.74725,  879.70483],
  [ 510.7772 ,  852.5359 ],
  [ 501.37665,  841.69104],
  [ 495.7031 ,  837.9818 ],
  [ 492.8027 ,  838.2645 ],
  [ 488.7158 ,  841.3744 ],
  [ 484.10153,  849.2904 ],
  [ 474.7639 ,  861.7095 ],
  [ 457.80814,  887.10767],
  [ 432.8147 ,  930.209  ],
  [ 412.2351 ,  978.81323],
  [ 393.4907 , 1032.5009 ],
  [ 372.67642, 1091.8483 ],
  [ 348.96176, 1154.023  ],
  [ 327.58588, 1215.1119 ],
  [ 308.0689 , 1270.5637 ],
  [ 294.31577, 1312.4564 ],
  [ 287.41812, 1339.6875 ],
  [ 285.32422, 1351.5018 ],
  [ 284.7656 , 1356.7635 ]];

  let p: usize = x.len() / 2;

  let t_: Array1<f64> = Array::linspace(0., 0.999, 1000);
  // let mut s_: Array2<f64> = array![[]];

  for t in t_ {
    println!("{},", sum(&x, t, p));
  }

}